<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180" total_samples="40660"><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.02%)</title><rect x="0.0025%" y="181" width="0.0172%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="7"/><text x="0.2525%" y="191.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.02%)</title><rect x="0.0025%" y="197" width="0.0221%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="9"/><text x="0.2525%" y="207.50"></text></g><g><title>[unknown] (38 samples, 0.09%)</title><rect x="0.0246%" y="165" width="0.0935%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="38"/><text x="0.2746%" y="175.50"></text></g><g><title>[unknown] (34 samples, 0.08%)</title><rect x="0.0344%" y="149" width="0.0836%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="34"/><text x="0.2844%" y="159.50"></text></g><g><title>[unknown] (30 samples, 0.07%)</title><rect x="0.0443%" y="133" width="0.0738%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="30"/><text x="0.2943%" y="143.50"></text></g><g><title>[unknown] (20 samples, 0.05%)</title><rect x="0.0689%" y="117" width="0.0492%" height="15" fill="rgb(232,128,0)" fg:x="28" fg:w="20"/><text x="0.3189%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="0.1033%" y="101" width="0.0148%" height="15" fill="rgb(207,160,47)" fg:x="42" fg:w="6"/><text x="0.3533%" y="111.50"></text></g><g><title>gomp_finish_task (15 samples, 0.04%)</title><rect x="0.1918%" y="149" width="0.0369%" height="15" fill="rgb(228,23,34)" fg:x="78" fg:w="15"/><text x="0.4418%" y="159.50"></text></g><g><title>gomp_barrier_wait (33 samples, 0.08%)</title><rect x="0.2287%" y="133" width="0.0812%" height="15" fill="rgb(218,30,26)" fg:x="93" fg:w="33"/><text x="0.4787%" y="143.50"></text></g><g><title>gomp_barrier_wait_start (33 samples, 0.08%)</title><rect x="0.2287%" y="117" width="0.0812%" height="15" fill="rgb(220,122,19)" fg:x="93" fg:w="33"/><text x="0.4787%" y="127.50"></text></g><g><title>gomp_simple_barrier_wait (1,703 samples, 4.19%)</title><rect x="0.2287%" y="149" width="4.1884%" height="15" fill="rgb(250,228,42)" fg:x="93" fg:w="1703"/><text x="0.4787%" y="159.50">gomp_..</text></g><g><title>gomp_barrier_wait_end (1,670 samples, 4.11%)</title><rect x="0.3099%" y="133" width="4.1072%" height="15" fill="rgb(240,193,28)" fg:x="126" fg:w="1670"/><text x="0.5599%" y="143.50">gomp..</text></g><g><title>do_wait (1,668 samples, 4.10%)</title><rect x="0.3148%" y="117" width="4.1023%" height="15" fill="rgb(216,20,37)" fg:x="128" fg:w="1668"/><text x="0.5648%" y="127.50">do_w..</text></g><g><title>do_spin (1,668 samples, 4.10%)</title><rect x="0.3148%" y="101" width="4.1023%" height="15" fill="rgb(206,188,39)" fg:x="128" fg:w="1668"/><text x="0.5648%" y="111.50">do_s..</text></g><g><title>do_wait (5,826 samples, 14.33%)</title><rect x="4.4196%" y="133" width="14.3286%" height="15" fill="rgb(217,207,13)" fg:x="1797" fg:w="5826"/><text x="4.6696%" y="143.50">do_wait</text></g><g><title>do_spin (5,826 samples, 14.33%)</title><rect x="4.4196%" y="117" width="14.3286%" height="15" fill="rgb(231,73,38)" fg:x="1797" fg:w="5826"/><text x="4.6696%" y="127.50">do_spin</text></g><g><title>gomp_team_barrier_wait_end (5,829 samples, 14.34%)</title><rect x="4.4171%" y="149" width="14.3360%" height="15" fill="rgb(225,20,46)" fg:x="1796" fg:w="5829"/><text x="4.6671%" y="159.50">gomp_team_barrier_wait..</text></g><g><title>gomp_team_barrier_wait_final (16 samples, 0.04%)</title><rect x="18.7531%" y="149" width="0.0394%" height="15" fill="rgb(210,31,41)" fg:x="7625" fg:w="16"/><text x="19.0031%" y="159.50"></text></g><g><title>gomp_barrier_wait_final_start (16 samples, 0.04%)</title><rect x="18.7531%" y="133" width="0.0394%" height="15" fill="rgb(221,200,47)" fg:x="7625" fg:w="16"/><text x="19.0031%" y="143.50"></text></g><g><title>GOMP_critical_end (974 samples, 2.40%)</title><rect x="20.7280%" y="133" width="2.3955%" height="15" fill="rgb(226,26,5)" fg:x="8428" fg:w="974"/><text x="20.9780%" y="143.50">GO..</text></g><g><title>gomp_mutex_unlock (973 samples, 2.39%)</title><rect x="20.7304%" y="117" width="2.3930%" height="15" fill="rgb(249,33,26)" fg:x="8429" fg:w="973"/><text x="20.9804%" y="127.50">go..</text></g><g><title>GOMP_critical_start (1,562 samples, 3.84%)</title><rect x="23.1333%" y="133" width="3.8416%" height="15" fill="rgb(235,183,28)" fg:x="9406" fg:w="1562"/><text x="23.3833%" y="143.50">GOMP..</text></g><g><title>gomp_mutex_lock (1,559 samples, 3.83%)</title><rect x="23.1407%" y="117" width="3.8342%" height="15" fill="rgb(221,5,38)" fg:x="9409" fg:w="1559"/><text x="23.3907%" y="127.50">gomp..</text></g><g><title>apply_action&lt;calc_best_path(._anon_72 const&amp;, cost_table_t&amp;)::{lambda(auto:1)#1}&gt; (4,019 samples, 9.88%)</title><rect x="26.9798%" y="133" width="9.8844%" height="15" fill="rgb(247,18,42)" fg:x="10970" fg:w="4019"/><text x="27.2298%" y="143.50">apply_action&lt;c..</text></g><g><title>apply_action&lt;calc_best_path(._anon_72 const&amp;, cost_table_t&amp;)::{lambda(auto:1)#1}&gt; (2,318 samples, 5.70%)</title><rect x="31.1633%" y="117" width="5.7009%" height="15" fill="rgb(241,131,45)" fg:x="12671" fg:w="2318"/><text x="31.4133%" y="127.50">apply_a..</text></g><g><title>apply_action&lt;main::{lambda(auto:1&amp;)#2}&gt; (721 samples, 1.77%)</title><rect x="36.8642%" y="133" width="1.7732%" height="15" fill="rgb(249,31,29)" fg:x="14989" fg:w="721"/><text x="37.1142%" y="143.50">a..</text></g><g><title>[libc.so.6] (41 samples, 0.10%)</title><rect x="38.7260%" y="101" width="0.1008%" height="15" fill="rgb(225,111,53)" fg:x="15746" fg:w="41"/><text x="38.9760%" y="111.50"></text></g><g><title>drand48 (79 samples, 0.19%)</title><rect x="38.6375%" y="133" width="0.1943%" height="15" fill="rgb(238,160,17)" fg:x="15710" fg:w="79"/><text x="38.8875%" y="143.50"></text></g><g><title>erand48_r (71 samples, 0.17%)</title><rect x="38.6572%" y="117" width="0.1746%" height="15" fill="rgb(214,148,48)" fg:x="15718" fg:w="71"/><text x="38.9072%" y="127.50"></text></g><g><title>gomp_iter_dynamic_next (81 samples, 0.20%)</title><rect x="38.8318%" y="133" width="0.1992%" height="15" fill="rgb(232,36,49)" fg:x="15789" fg:w="81"/><text x="39.0818%" y="143.50"></text></g><g><title>gomp_work_share_init_done (5 samples, 0.01%)</title><rect x="39.0334%" y="117" width="0.0123%" height="15" fill="rgb(209,103,24)" fg:x="15871" fg:w="5"/><text x="39.2834%" y="127.50"></text></g><g><title>gomp_ptrlock_set (5 samples, 0.01%)</title><rect x="39.0334%" y="101" width="0.0123%" height="15" fill="rgb(229,88,8)" fg:x="15871" fg:w="5"/><text x="39.2834%" y="111.50"></text></g><g><title>do_spin (16 samples, 0.04%)</title><rect x="39.1613%" y="53" width="0.0394%" height="15" fill="rgb(213,181,19)" fg:x="15923" fg:w="16"/><text x="39.4113%" y="63.50"></text></g><g><title>gomp_loop_dynamic_start (77 samples, 0.19%)</title><rect x="39.0334%" y="133" width="0.1894%" height="15" fill="rgb(254,191,54)" fg:x="15871" fg:w="77"/><text x="39.2834%" y="143.50"></text></g><g><title>gomp_work_share_start (72 samples, 0.18%)</title><rect x="39.0457%" y="117" width="0.1771%" height="15" fill="rgb(241,83,37)" fg:x="15876" fg:w="72"/><text x="39.2957%" y="127.50"></text></g><g><title>gomp_ptrlock_get (40 samples, 0.10%)</title><rect x="39.1244%" y="101" width="0.0984%" height="15" fill="rgb(233,36,39)" fg:x="15908" fg:w="40"/><text x="39.3744%" y="111.50"></text></g><g><title>gomp_ptrlock_get_slow (31 samples, 0.08%)</title><rect x="39.1466%" y="85" width="0.0762%" height="15" fill="rgb(226,3,54)" fg:x="15917" fg:w="31"/><text x="39.3966%" y="95.50"></text></g><g><title>do_wait (25 samples, 0.06%)</title><rect x="39.1613%" y="69" width="0.0615%" height="15" fill="rgb(245,192,40)" fg:x="15923" fg:w="25"/><text x="39.4113%" y="79.50"></text></g><g><title>futex_wait (9 samples, 0.02%)</title><rect x="39.2007%" y="53" width="0.0221%" height="15" fill="rgb(238,167,29)" fg:x="15939" fg:w="9"/><text x="39.4507%" y="63.50"></text></g><g><title>__futex_wait (9 samples, 0.02%)</title><rect x="39.2007%" y="37" width="0.0221%" height="15" fill="rgb(232,182,51)" fg:x="15939" fg:w="9"/><text x="39.4507%" y="47.50"></text></g><g><title>gomp_mutex_lock_slow (22,125 samples, 54.41%)</title><rect x="39.2228%" y="133" width="54.4147%" height="15" fill="rgb(231,60,39)" fg:x="15948" fg:w="22125"/><text x="39.4728%" y="143.50">gomp_mutex_lock_slow</text></g><g><title>do_spin (21,805 samples, 53.63%)</title><rect x="40.0098%" y="117" width="53.6276%" height="15" fill="rgb(208,69,12)" fg:x="16268" fg:w="21805"/><text x="40.2598%" y="127.50">do_spin</text></g><g><title>[libc.so.6] (38,091 samples, 93.68%)</title><rect x="0.0246%" y="181" width="93.6818%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="38091"/><text x="0.2746%" y="191.50">[libc.so.6]</text></g><g><title>gomp_thread_start (38,048 samples, 93.58%)</title><rect x="0.1303%" y="165" width="93.5760%" height="15" fill="rgb(213,116,39)" fg:x="53" fg:w="38048"/><text x="0.3803%" y="175.50">gomp_thread_start</text></g><g><title>main._omp_fn.0 (30,460 samples, 74.91%)</title><rect x="18.7924%" y="149" width="74.9139%" height="15" fill="rgb(222,207,29)" fg:x="7641" fg:w="30460"/><text x="19.0424%" y="159.50">main._omp_fn.0</text></g><g><title>random_wire (25 samples, 0.06%)</title><rect x="93.6449%" y="133" width="0.0615%" height="15" fill="rgb(206,96,30)" fg:x="38076" fg:w="25"/><text x="93.8949%" y="143.50"></text></g><g><title>drand48 (16 samples, 0.04%)</title><rect x="93.6670%" y="117" width="0.0394%" height="15" fill="rgb(218,138,4)" fg:x="38085" fg:w="16"/><text x="93.9170%" y="127.50"></text></g><g><title>erand48_r (13 samples, 0.03%)</title><rect x="93.6744%" y="101" width="0.0320%" height="15" fill="rgb(250,191,14)" fg:x="38088" fg:w="13"/><text x="93.9244%" y="111.50"></text></g><g><title>[libc.so.6] (5 samples, 0.01%)</title><rect x="93.6940%" y="85" width="0.0123%" height="15" fill="rgb(239,60,40)" fg:x="38096" fg:w="5"/><text x="93.9440%" y="95.50"></text></g><g><title>[libc.so.6] (38,096 samples, 93.69%)</title><rect x="0.0246%" y="197" width="93.6940%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="38096"/><text x="0.2746%" y="207.50">[libc.so.6]</text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="93.7063%" y="181" width="0.0123%" height="15" fill="rgb(225,35,8)" fg:x="38101" fg:w="5"/><text x="93.9563%" y="191.50"></text></g><g><title>[unknown] (16 samples, 0.04%)</title><rect x="93.7186%" y="197" width="0.0394%" height="15" fill="rgb(250,213,24)" fg:x="38106" fg:w="16"/><text x="93.9686%" y="207.50"></text></g><g><title>gomp_init_task (9 samples, 0.02%)</title><rect x="93.8170%" y="101" width="0.0221%" height="15" fill="rgb(247,123,22)" fg:x="38146" fg:w="9"/><text x="94.0670%" y="111.50"></text></g><g><title>do_wait (25 samples, 0.06%)</title><rect x="93.8416%" y="69" width="0.0615%" height="15" fill="rgb(231,138,38)" fg:x="38156" fg:w="25"/><text x="94.0916%" y="79.50"></text></g><g><title>do_spin (25 samples, 0.06%)</title><rect x="93.8416%" y="53" width="0.0615%" height="15" fill="rgb(231,145,46)" fg:x="38156" fg:w="25"/><text x="94.0916%" y="63.50"></text></g><g><title>gomp_team_start (59 samples, 0.15%)</title><rect x="93.7752%" y="117" width="0.1451%" height="15" fill="rgb(251,118,11)" fg:x="38129" fg:w="59"/><text x="94.0252%" y="127.50"></text></g><g><title>gomp_simple_barrier_wait (33 samples, 0.08%)</title><rect x="93.8392%" y="101" width="0.0812%" height="15" fill="rgb(217,147,25)" fg:x="38155" fg:w="33"/><text x="94.0892%" y="111.50"></text></g><g><title>gomp_barrier_wait_end (32 samples, 0.08%)</title><rect x="93.8416%" y="85" width="0.0787%" height="15" fill="rgb(247,81,37)" fg:x="38156" fg:w="32"/><text x="94.0916%" y="95.50"></text></g><g><title>gomp_barrier_wait_end (7 samples, 0.02%)</title><rect x="93.9031%" y="69" width="0.0172%" height="15" fill="rgb(209,12,38)" fg:x="38181" fg:w="7"/><text x="94.1531%" y="79.50"></text></g><g><title>futex_wake (7 samples, 0.02%)</title><rect x="93.9031%" y="53" width="0.0172%" height="15" fill="rgb(227,1,9)" fg:x="38181" fg:w="7"/><text x="94.1531%" y="63.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="93.9031%" y="37" width="0.0172%" height="15" fill="rgb(248,47,43)" fg:x="38181" fg:w="7"/><text x="94.1531%" y="47.50"></text></g><g><title>GOMP_critical_end (62 samples, 0.15%)</title><rect x="94.0580%" y="101" width="0.1525%" height="15" fill="rgb(221,10,30)" fg:x="38244" fg:w="62"/><text x="94.3080%" y="111.50"></text></g><g><title>gomp_mutex_unlock (62 samples, 0.15%)</title><rect x="94.0580%" y="85" width="0.1525%" height="15" fill="rgb(210,229,1)" fg:x="38244" fg:w="62"/><text x="94.3080%" y="95.50"></text></g><g><title>GOMP_critical_start (90 samples, 0.22%)</title><rect x="94.2105%" y="101" width="0.2213%" height="15" fill="rgb(222,148,37)" fg:x="38306" fg:w="90"/><text x="94.4605%" y="111.50"></text></g><g><title>gomp_mutex_lock (90 samples, 0.22%)</title><rect x="94.2105%" y="85" width="0.2213%" height="15" fill="rgb(234,67,33)" fg:x="38306" fg:w="90"/><text x="94.4605%" y="95.50"></text></g><g><title>apply_action&lt;calc_best_path(._anon_72 const&amp;, cost_table_t&amp;)::{lambda(auto:1)#1}&gt; (254 samples, 0.62%)</title><rect x="94.4319%" y="101" width="0.6247%" height="15" fill="rgb(247,98,35)" fg:x="38396" fg:w="254"/><text x="94.6819%" y="111.50"></text></g><g><title>apply_action&lt;calc_best_path(._anon_72 const&amp;, cost_table_t&amp;)::{lambda(auto:1)#1}&gt; (143 samples, 0.35%)</title><rect x="94.7049%" y="85" width="0.3517%" height="15" fill="rgb(247,138,52)" fg:x="38507" fg:w="143"/><text x="94.9549%" y="95.50"></text></g><g><title>apply_action&lt;main::{lambda(auto:1&amp;)#2}&gt; (49 samples, 0.12%)</title><rect x="95.0566%" y="101" width="0.1205%" height="15" fill="rgb(213,79,30)" fg:x="38650" fg:w="49"/><text x="95.3066%" y="111.50"></text></g><g><title>gomp_iter_dynamic_next (11 samples, 0.03%)</title><rect x="95.1845%" y="101" width="0.0271%" height="15" fill="rgb(246,177,23)" fg:x="38702" fg:w="11"/><text x="95.4345%" y="111.50"></text></g><g><title>gomp_mutex_lock_slow (1,517 samples, 3.73%)</title><rect x="95.2140%" y="101" width="3.7309%" height="15" fill="rgb(230,62,27)" fg:x="38714" fg:w="1517"/><text x="95.4640%" y="111.50">gomp..</text></g><g><title>do_spin (1,502 samples, 3.69%)</title><rect x="95.2509%" y="85" width="3.6940%" height="15" fill="rgb(216,154,8)" fg:x="38729" fg:w="1502"/><text x="95.5009%" y="95.50">do_s..</text></g><g><title>GOMP_parallel (2,113 samples, 5.20%)</title><rect x="93.7580%" y="133" width="5.1968%" height="15" fill="rgb(244,35,45)" fg:x="38122" fg:w="2113"/><text x="94.0080%" y="143.50">GOMP_p..</text></g><g><title>main._omp_fn.0 (2,047 samples, 5.03%)</title><rect x="93.9203%" y="117" width="5.0344%" height="15" fill="rgb(251,115,12)" fg:x="38188" fg:w="2047"/><text x="94.1703%" y="127.50">main._..</text></g><g><title>[libc.so.6] (45 samples, 0.11%)</title><rect x="98.9547%" y="133" width="0.1107%" height="15" fill="rgb(240,54,50)" fg:x="40235" fg:w="45"/><text x="99.2047%" y="143.50"></text></g><g><title>gomp_team_barrier_wait_end (375 samples, 0.92%)</title><rect x="99.0728%" y="117" width="0.9223%" height="15" fill="rgb(233,84,52)" fg:x="40283" fg:w="375"/><text x="99.3228%" y="127.50"></text></g><g><title>do_wait (375 samples, 0.92%)</title><rect x="99.0728%" y="101" width="0.9223%" height="15" fill="rgb(207,117,47)" fg:x="40283" fg:w="375"/><text x="99.3228%" y="111.50"></text></g><g><title>do_spin (375 samples, 0.92%)</title><rect x="99.0728%" y="85" width="0.9223%" height="15" fill="rgb(249,43,39)" fg:x="40283" fg:w="375"/><text x="99.3228%" y="95.50"></text></g><g><title>all (40,660 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="40660"/><text x="0.2500%" y="239.50"></text></g><g><title>wireroute (40,660 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="40660"/><text x="0.2500%" y="223.50">wireroute</text></g><g><title>_start (2,538 samples, 6.24%)</title><rect x="93.7580%" y="197" width="6.2420%" height="15" fill="rgb(242,79,21)" fg:x="38122" fg:w="2538"/><text x="94.0080%" y="207.50">_start</text></g><g><title>__libc_start_main (2,538 samples, 6.24%)</title><rect x="93.7580%" y="181" width="6.2420%" height="15" fill="rgb(211,96,35)" fg:x="38122" fg:w="2538"/><text x="94.0080%" y="191.50">__libc_s..</text></g><g><title>[libc.so.6] (2,538 samples, 6.24%)</title><rect x="93.7580%" y="165" width="6.2420%" height="15" fill="rgb(253,215,40)" fg:x="38122" fg:w="2538"/><text x="94.0080%" y="175.50">[libc.so..</text></g><g><title>main (2,538 samples, 6.24%)</title><rect x="93.7580%" y="149" width="6.2420%" height="15" fill="rgb(211,81,21)" fg:x="38122" fg:w="2538"/><text x="94.0080%" y="159.50">main</text></g><g><title>gomp_team_end (379 samples, 0.93%)</title><rect x="99.0679%" y="133" width="0.9321%" height="15" fill="rgb(208,190,38)" fg:x="40281" fg:w="379"/><text x="99.3179%" y="143.50"></text></g></svg></svg>